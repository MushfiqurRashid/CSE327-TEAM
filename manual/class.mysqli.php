<?php // generated by https://www.devsense.com/

/**
 * Represents a connection between PHP and a MySQL database.
 */
class mysqli
{
	#region Properties

	/**
	 * @var int|string
	 */
	readonly public $affected_rows;

	/**
	 * @var string
	 */
	readonly public $client_info;

	/**
	 * @var int
	 */
	readonly public $client_version;

	/**
	 * @var int
	 */
	readonly public $connect_errno;

	/**
	 * @var string|null
	 */
	readonly public $connect_error;

	/**
	 * @var int
	 */
	readonly public $errno;

	/**
	 * @var string
	 */
	readonly public $error;

	/**
	 * @var array
	 */
	readonly public $error_list;

	/**
	 * @var int
	 */
	readonly public $field_count;

	/**
	 * @var string
	 */
	readonly public $host_info;

	/**
	 * @var string|null
	 */
	readonly public $info;

	/**
	 * @var int|string
	 */
	readonly public $insert_id;

	/**
	 * @var int
	 */
	readonly public $protocol_version;

	/**
	 * @var string
	 */
	readonly public $server_info;

	/**
	 * @var int
	 */
	readonly public $server_version;

	/**
	 * @var string
	 */
	readonly public $sqlstate;

	/**
	 * @var int
	 */
	readonly public $thread_id;

	/**
	 * @var int
	 */
	readonly public $warning_count;

	#endregion

	#region Functions

	/**
	 * Turns on or off auto-commit mode on queries for the database connection.
	 *
	 * @param bool $enable Whether to turn on auto-commit or not.
	 * @return bool Returns `true` on success or `false` on failure.
	 */
	function autocommit($enable): bool { /* function body is hidden */ }

	/**
	 * Starts a transaction
	 * Begins a transaction. Requires the InnoDB engine (it is enabled by default). For additional details about how MySQL transactions work, see » http://dev.mysql.com/doc/mysql/en/commit.html .
	 *
	 * @param int|null $flags Valid flags are:
	 *                        - `MYSQLI_TRANS_START_READ_ONLY` : Start the transaction as "START TRANSACTION READ ONLY". Requires MySQL 5.6 and above.
	 *                       
	 *                        - `MYSQLI_TRANS_START_READ_WRITE` : Start the transaction as "START TRANSACTION READ WRITE". Requires MySQL 5.6 and above.
	 *                       
	 *                        - `MYSQLI_TRANS_START_WITH_CONSISTENT_SNAPSHOT` : Start the transaction as "START TRANSACTION WITH CONSISTENT SNAPSHOT".
	 * @param string|null $name Savepoint name for the transaction.
	 * @return bool Returns `true` on success or `false` on failure.
	 */
	function begin_transaction($flags = 0, $name = null): bool { /* function body is hidden */ }

	/**
	 * Changes the user of the specified database connection and sets the current database.
	 *
	 * @param string $username The MySQL user name.
	 * @param string $password The MySQL password.
	 * @param string|null $database The database to change to. If desired, the `null` value may be passed resulting in only changing the user and not selecting a database. To select a database in this case use the mysqli_select_db() function.
	 * @return bool Returns `true` on success or `false` on failure.
	 */
	function change_user($username, $password, $database): bool { /* function body is hidden */ }

	/**
	 * Returns the current character set of the database connection.
	 * @return string The current character set of the connection
	 */
	function character_set_name(): string { /* function body is hidden */ }

	/**
	 * Closes a previously opened database connection.
	 * @return bool Returns `true` on success or `false` on failure.
	 */
	function close(): bool { /* function body is hidden */ }

	/**
	 * Commits the current transaction for the database connection.
	 *
	 * @param int|null $flags A bitmask of `MYSQLI_TRANS_COR_*` constants.
	 * @param string|null $name If provided then `COMMIT/*name*\` is executed.
	 * @return bool Returns `true` on success or `false` on failure.
	 */
	function commit($flags = 0, $name = null): bool { /* function body is hidden */ }

	/**
	 * Open a new connection to the MySQL server
	 * Opens a connection to the MySQL Server.
	 *
	 * @param string|null $hostname Can be either a host name or an IP address. The local host is assumed when passing the `null` value or the string "localhost" to this parameter. When possible, pipes will be used instead of the TCP/IP protocol. The TCP/IP protocol is used if a host name and port number are provided together e.g. `localhost:3308`. Prepending host by `p:` opens a persistent connection. mysqli_change_user() is automatically called on connections opened from the connection pool.
	 * @param string|null $username The MySQL user name.
	 * @param string|null $password If not provided or `null` , the MySQL server will attempt to authenticate the user against those user records which have no password only. This allows one username to be used with different permissions (depending on if a password is provided or not).
	 * @param string|null $database If provided will specify the default database to be used when performing queries.
	 * @param int|null $port Specifies the port number to attempt to connect to the MySQL server.
	 * @param string|null $socket Specifies the socket or named pipe that should be used. Note : Specifying the `socket` parameter will not explicitly determine the type of connection to be used when connecting to the MySQL server. How the connection is made to the MySQL database is determined by the `hostname` parameter.
	 * @return void
	 */
	function connect(
    $hostname = ini_get("mysqli.default_host"),
    $username = ini_get("mysqli.default_user"),
    $password = ini_get("mysqli.default_pw"),
    $database = "",
    $port = ini_get("mysqli.default_port"),
    $socket = ini_get("mysqli.default_socket")
): void { /* function body is hidden */ }

	/**
	 * Performs debugging operations using the Fred Fish debugging library.
	 *
	 * @param string $options A string representing the debugging operation to perform The debug control string is a sequence of colon separated fields as follows: `<field_1>:<field_2>:<field_N>` Each field consists of a mandatory flag character followed by an optional `,` and comma separated list of modifiers: `flag[,modifier,modifier,...,modifier]`
	 *                        Recognized Flag Characters
	 *                        | O | `MYSQLND_DEBUG_FLUSH` |
	 *                        | A/a | `MYSQLND_DEBUG_APPEND` |
	 *                        | F | `MYSQLND_DEBUG_DUMP_FILE` |
	 *                        | i | `MYSQLND_DEBUG_DUMP_PID` |
	 *                        | L | `MYSQLND_DEBUG_DUMP_LINE` |
	 *                        | m | `MYSQLND_DEBUG_TRACE_MEMORY_CALLS` |
	 *                        | n | `MYSQLND_DEBUG_DUMP_LEVEL` |
	 *                        | o | output to file |
	 *                        | T | `MYSQLND_DEBUG_DUMP_TIME` |
	 *                        | t | `MYSQLND_DEBUG_DUMP_TRACE` |
	 *                        | x | `MYSQLND_DEBUG_PROFILE_CALLS` |
	 * @return bool Returns `true` .
	 */
	function debug($options): bool { /* function body is hidden */ }

	/**
	 * Dump debugging information into the log
	 * This function is designed to be executed by an user with the SUPER privilege and is used to dump debugging information into the log for the MySQL Server relating to the connection.
	 * @return bool Returns `true` on success or `false` on failure.
	 */
	function dump_debug_info(): bool { /* function body is hidden */ }

	/**
	 * Alias of mysqli_real_escape_string()
	 * This function is an alias of: mysqli_real_escape_string().
	 *
	 * @param string $string The string to be escaped. Characters encoded are `NUL (ASCII 0), \n, \r, \, ', ", and
	 *                           Control-Z`.
	 * @return string Returns an escaped string.
	 */
	function escape_string($string): string { /* function body is hidden */ }

	/**
	 * Alias of mysqli_real_escape_string()
	 * This function is an alias of: mysqli_real_escape_string().
	 *
	 * @param string $string The string to be escaped. Characters encoded are `NUL (ASCII 0), \n, \r, \, ', ", and
	 *                           Control-Z`.
	 * @return string Returns an escaped string.
	 */
	function escape_string($string): string { /* function body is hidden */ }

	/**
	 * Prepares, binds parameters, and executes SQL statement
	 * Prepares the SQL query, binds parameters, and executes it. The mysqli::execute_query() method is a shortcut for mysqli::prepare(), mysqli_stmt::bind_param(), mysqli_stmt::execute(), and mysqli_stmt::get_result().
	 *
	 * @param string $query The query, as a string. It must consist of a single SQL statement. The SQL statement may contain zero or more parameter markers represented by question mark (`?`) characters at the appropriate positions. Note : The markers are legal only in certain places in SQL statements. For example, they are permitted in the `VALUES()` list of an `INSERT` statement (to specify column values for a row), or in a comparison with a column in a `WHERE` clause to specify a comparison value. However, they are not permitted for identifiers (such as table or column names).
	 * @param array|null $params An optional list `array` with as many elements as there are bound parameters in the SQL statement being executed. Each value is treated as a `string`.
	 * @return bool|mysqli_result Returns `false` on failure. For successful queries which produce a result set, such as `SELECT, SHOW, DESCRIBE` or `EXPLAIN`, returns a mysqli_result object. For other successful queries, returns `true` .
	 */
	function execute_query($query, $params = null): bool|mysqli_result { /* function body is hidden */ }

	/**
	 * Returns a character set object providing several properties of the current active character set.
	 * @return object|null The function returns a character set object with the following properties:
	 */
	function get_charset(): object|null { /* function body is hidden */ }

	/**
	 * Get MySQL client info
	 * Returns a string that represents the MySQL client library version.
	 * @return string A string that represents the MySQL client library version.
	 */
	function get_client_info(): string { /* function body is hidden */ }

	/**
	 * Returns statistics about the client connection.
	 * @return array Returns an array with connection stats.
	 */
	function get_connection_stats(): array { /* function body is hidden */ }

	/**
	 * Returns the version of the MySQL server
	 * Returns a string representing the version of the MySQL server that the MySQLi extension is connected to.
	 * @return string A character string representing the server version.
	 */
	function get_server_info(): string { /* function body is hidden */ }

	/**
	 * Get result of SHOW WARNINGS
	 * Object-oriented style
	 * @return bool|mysqli_warning
	 */
	function get_warnings(): bool|mysqli_warning { /* function body is hidden */ }

	/**
	 * Initializes MySQLi and returns an object for use with mysqli_real_connect()
	 * Allocates or initializes a MYSQL object suitable for mysqli_options() and mysqli_real_connect().
	 * @return bool|null mysqli::init() returns `null` on success, or `false` on failure. mysqli_init() returns an object on success, or `false` on failure.
	 */
	function init(): bool|null { /* function body is hidden */ }

	/**
	 * Asks the server to kill a MySQL thread
	 * This function is used to ask the server to kill a MySQL thread specified by the `process_id` parameter. This value must be retrieved by calling the mysqli_thread_id() function.
	 *
	 * @param int $process_id
	 * @return bool Returns `true` on success or `false` on failure.
	 */
	function kill($process_id): bool { /* function body is hidden */ }

	/**
	 * Check if there are any more query results from a multi query
	 * Indicates if one or more result sets are available from a previous call to mysqli_multi_query().
	 * @return bool Returns `true` if one or more result sets (including errors) are available from a previous call to mysqli_multi_query(), otherwise `false` .
	 */
	function more_results(): bool { /* function body is hidden */ }

	/**
	 * Performs one or more queries on the database
	 * Executes one or multiple queries which are concatenated by a semicolon.
	 *
	 * @param string $query A string containing the queries to be executed. Multiple queries must be separated by a semicolon.
	 * @return bool Returns `false` if the first statement failed. To retrieve subsequent errors from other statements you have to call mysqli_next_result() first.
	 */
	function multi_query($query): bool { /* function body is hidden */ }

	/**
	 * Prepares next result set from a previous call to mysqli_multi_query() which can be retrieved by mysqli_store_result() or mysqli_use_result().
	 * @return bool Returns `true` on success or `false` on failure. Also returns `false` if the next statement resulted in an error, unlike mysqli_more_results().
	 */
	function next_result(): bool { /* function body is hidden */ }

	/**
	 * Set options
	 * Used to set extra connect options and affect behavior for a connection.
	 *
	 * @param int $option The option that you want to set. It can be one of the following values:
	 *                    Valid options
	 *                    | `MYSQLI_OPT_CONNECT_TIMEOUT` | Connection timeout in seconds |
	 *                    | `MYSQLI_OPT_READ_TIMEOUT` | Command execution result timeout in seconds. Available as of PHP 7.2.0. |
	 *                    | `MYSQLI_OPT_LOCAL_INFILE` | Enable/disable use of `LOAD LOCAL INFILE` |
	 *                    | `MYSQLI_INIT_COMMAND` | Command to execute after when connecting to MySQL server |
	 *                    | `MYSQLI_SET_CHARSET_NAME` | The charset to be set as default. |
	 *                    | `MYSQLI_READ_DEFAULT_FILE` | Read options from named option file instead of my.cnf Not supported by mysqlnd. |
	 *                    | `MYSQLI_READ_DEFAULT_GROUP` | Read options from the named group from my.cnf or the file specified with `MYSQL_READ_DEFAULT_FILE` . Not supported by mysqlnd. |
	 *                    | `MYSQLI_SERVER_PUBLIC_KEY` | RSA public key file used with the SHA-256 based authentication. |
	 *                    | `MYSQLI_OPT_NET_CMD_BUFFER_SIZE` | The size of the internal command/network buffer. Only valid for mysqlnd. |
	 *                    | `MYSQLI_OPT_NET_READ_BUFFER_SIZE` | Maximum read chunk size in bytes when reading the body of a MySQL command packet. Only valid for mysqlnd. |
	 *                    | `MYSQLI_OPT_INT_AND_FLOAT_NATIVE` | Convert integer and float columns back to PHP numbers. Only valid for mysqlnd. |
	 *                    | `MYSQLI_OPT_SSL_VERIFY_SERVER_CERT` | Whether to verify server certificate or not. |
	 * @param int|string $value The value for the option.
	 * @return bool Returns `true` on success or `false` on failure.
	 */
	function options($option, $value): bool { /* function body is hidden */ }

	/**
	 * Pings a server connection, or tries to reconnect if the connection has gone down
	 * Checks whether the connection to the server is working. If it has gone down and global option mysqli.reconnect is enabled, an automatic reconnection is attempted.
	 * @return bool Returns `true` on success or `false` on failure.
	 */
	function ping(): bool { /* function body is hidden */ }

	/**
	 * Poll connections. The method can be used as static .
	 *
	 * @param array|null $read List of connections to check for outstanding results that can be read.
	 * @param array|null $error List of connections on which an error occurred, for example, query failure or lost connection.
	 * @param array $reject List of connections rejected because no asynchronous query has been run on for which the function could poll results.
	 * @param int $seconds Maximum number of seconds to wait, must be non-negative.
	 * @param int|null $microseconds Maximum number of microseconds to wait, must be non-negative.
	 * @return bool|int Returns number of ready connections upon success, `false` otherwise.
	 */
	static function poll(&$read, &$error, &$reject, $seconds, $microseconds = 0): bool|int { /* function body is hidden */ }

	/**
	 * Prepares an SQL statement for execution
	 * Prepares the SQL query, and returns a statement handle to be used for further operations on the statement. The query must consist of a single SQL statement.
	 *
	 * @param string $query The query, as a string. It must consist of a single SQL statement. The SQL statement may contain zero or more parameter markers represented by question mark (`?`) characters at the appropriate positions. Note : The markers are legal only in certain places in SQL statements. For example, they are permitted in the `VALUES()` list of an `INSERT` statement (to specify column values for a row), or in a comparison with a column in a `WHERE` clause to specify a comparison value. However, they are not permitted for identifiers (such as table or column names).
	 * @return bool|mysqli_stmt mysqli_prepare() returns a statement object or `false` if an error occurred.
	 */
	function prepare($query): bool|mysqli_stmt { /* function body is hidden */ }

	/**
	 * Performs a query on the database
	 * Performs a `query` against the database.
	 *
	 * @param string $query The query string.
	 * @param int|null $result_mode The result mode can be one of 3 constants indicating how the result will be returned from the MySQL server. `MYSQLI_STORE_RESULT` (default) - returns a mysqli_result object with buffered result set. `MYSQLI_USE_RESULT` - returns a mysqli_result object with unbuffered result set. As long as there are pending records waiting to be fetched, the connection line will be busy and all subsequent calls will return error `Commands out of sync`. To avoid the error all records must be fetched from the server or the result set must be discarded by calling mysqli_free_result(). `MYSQLI_ASYNC` (available with mysqlnd) - the query is performed asynchronously and no result set is immediately returned. mysqli_poll() is then used to get results from such queries. Used in combination with either `MYSQLI_STORE_RESULT` or `MYSQLI_USE_RESULT` constant.
	 * @return bool|mysqli_result Returns `false` on failure. For successful queries which produce a result set, such as `SELECT, SHOW, DESCRIBE` or `EXPLAIN`, mysqli_query() will return a mysqli_result object. For other successful queries, mysqli_query() will return `true` .
	 */
	function query($query, $result_mode = MYSQLI_STORE_RESULT): bool|mysqli_result { /* function body is hidden */ }

	/**
	 * Opens a connection to a mysql server
	 * Establish a connection to a MySQL database engine.
	 *
	 * @param string|null $host Can be either a host name or an IP address. Passing the `null` value or the string "localhost" to this parameter, the local host is assumed. When possible, pipes will be used instead of the TCP/IP protocol.
	 * @param string|null $username The MySQL user name.
	 * @param string|null $passwd If provided or `null` , the MySQL server will attempt to authenticate the user against those user records which have no password only. This allows one username to be used with different permissions (depending on if a password as provided or not).
	 * @param string|null $dbname If provided will specify the default database to be used when performing queries.
	 * @param int|null $port Specifies the port number to attempt to connect to the MySQL server.
	 * @param string|null $socket Specifies the socket or named pipe that should be used. Note : Specifying the `socket` parameter will not explicitly determine the type of connection to be used when connecting to the MySQL server. How the connection is made to the MySQL database is determined by the `host` parameter.
	 * @param int|null $flags With the parameter `flags` you can set different connection options:
	 *                        Supported flags
	 *                        | `MYSQLI_CLIENT_COMPRESS` | Use compression protocol |
	 *                        | `MYSQLI_CLIENT_FOUND_ROWS` | return number of matched rows, not the number of affected rows |
	 *                        | `MYSQLI_CLIENT_IGNORE_SPACE` | Allow spaces after function names. Makes all function names reserved words. |
	 *                        | `MYSQLI_CLIENT_INTERACTIVE` | Allow `interactive_timeout` seconds (instead of `wait_timeout` seconds) of inactivity before closing the connection |
	 *                        | `MYSQLI_CLIENT_SSL` | Use SSL (encryption) |
	 *                        | `MYSQLI_CLIENT_SSL_DONT_VERIFY_SERVER_CERT` | Like `MYSQLI_CLIENT_SSL` , but disables validation of the provided SSL certificate. This is only for installations using MySQL Native Driver and MySQL 5.6 or later. | Note : For security reasons the `MULTI_STATEMENT` flag is not supported in PHP. If you want to execute multiple queries use the mysqli_multi_query() function.
	 * @return bool Returns `true` on success or `false` on failure.
	 */
	function real_connect(
    $host,
    $username,
    $passwd,
    $dbname,
    $port,
    $socket,
    $flags
): bool { /* function body is hidden */ }

	/**
	 * Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection
	 * This function is used to create a legal SQL string that you can use in an SQL statement. The given string is encoded to produce an escaped SQL string, taking into account the current character set of the connection.
	 *
	 * @param string $string The string to be escaped. Characters encoded are `NUL (ASCII 0), \n, \r, \, ', ", and
	 *                           Control-Z`.
	 * @return string Returns an escaped string.
	 */
	function real_escape_string($string): string { /* function body is hidden */ }

	/**
	 * Execute an SQL query
	 * Executes a single query against the database whose result can then be retrieved or stored using the mysqli_store_result() or mysqli_use_result() functions.
	 *
	 * @param string $query The query string.
	 * @return bool Returns `true` on success or `false` on failure.
	 */
	function real_query($query): bool { /* function body is hidden */ }

	/**
	 * Get result from async query.
	 * @return bool|mysqli_result Returns `false` on failure. For successful queries which produce a result set, such as `SELECT, SHOW, DESCRIBE` or `EXPLAIN`, mysqli_reap_async_query() will return a mysqli_result object. For other successful queries, mysqli_reap_async_query() will return `true` .
	 */
	function reap_async_query(): bool|mysqli_result { /* function body is hidden */ }

	/**
	 * Refreshes
	 * Flushes tables or caches, or resets the replication server information.
	 *
	 * @param int $flags The options to refresh, using the MYSQLI_REFRESH_* constants as documented within the MySQLi constants documentation. See also the official » MySQL Refresh documentation.
	 * @return bool `true` if the refresh was a success, otherwise `false`
	 */
	function refresh($flags): bool { /* function body is hidden */ }

	/**
	 * Removes the named savepoint from the set of savepoints of the current transaction
	 * This function is identical to executing `$mysqli->query("RELEASE SAVEPOINT `$name`");`. This function does not trigger commit or rollback.
	 *
	 * @param string $name The identifier of the savepoint.
	 * @return bool Returns `true` on success or `false` on failure.
	 */
	function release_savepoint($name): bool { /* function body is hidden */ }

	/**
	 * Rollbacks the current transaction for the database.
	 *
	 * @param int|null $flags A bitmask of `MYSQLI_TRANS_COR_*` constants.
	 * @param string|null $name If provided then `ROLLBACK/*name*\` is executed.
	 * @return bool Returns `true` on success or `false` on failure.
	 */
	function rollback($flags = 0, $name = null): bool { /* function body is hidden */ }

	/**
	 * Set a named transaction savepoint
	 * This function is identical to executing `$mysqli->query("SAVEPOINT `$name`");`
	 *
	 * @param string $name The identifier of the savepoint.
	 * @return bool Returns `true` on success or `false` on failure.
	 */
	function savepoint($name): bool { /* function body is hidden */ }

	/**
	 * Selects the default database to be used when performing queries against the database connection.
	 *
	 * @param string $database The database name.
	 * @return bool Returns `true` on success or `false` on failure.
	 */
	function select_db($database): bool { /* function body is hidden */ }

	/**
	 * Sets the client character set
	 * Sets the character set to be used when sending data from and to the database server.
	 *
	 * @param string $charset The desired character set.
	 * @return bool Returns `true` on success or `false` on failure.
	 */
	function set_charset($charset): bool { /* function body is hidden */ }

	/**
	 * Alias of mysqli_options()
	 * This function is an alias of: mysqli_options().
	 *
	 * @param int $option The option that you want to set. It can be one of the following values:
	 *                    Valid options
	 *                    | `MYSQLI_OPT_CONNECT_TIMEOUT` | Connection timeout in seconds |
	 *                    | `MYSQLI_OPT_READ_TIMEOUT` | Command execution result timeout in seconds. Available as of PHP 7.2.0. |
	 *                    | `MYSQLI_OPT_LOCAL_INFILE` | Enable/disable use of `LOAD LOCAL INFILE` |
	 *                    | `MYSQLI_INIT_COMMAND` | Command to execute after when connecting to MySQL server |
	 *                    | `MYSQLI_SET_CHARSET_NAME` | The charset to be set as default. |
	 *                    | `MYSQLI_READ_DEFAULT_FILE` | Read options from named option file instead of my.cnf Not supported by mysqlnd. |
	 *                    | `MYSQLI_READ_DEFAULT_GROUP` | Read options from the named group from my.cnf or the file specified with `MYSQL_READ_DEFAULT_FILE` . Not supported by mysqlnd. |
	 *                    | `MYSQLI_SERVER_PUBLIC_KEY` | RSA public key file used with the SHA-256 based authentication. |
	 *                    | `MYSQLI_OPT_NET_CMD_BUFFER_SIZE` | The size of the internal command/network buffer. Only valid for mysqlnd. |
	 *                    | `MYSQLI_OPT_NET_READ_BUFFER_SIZE` | Maximum read chunk size in bytes when reading the body of a MySQL command packet. Only valid for mysqlnd. |
	 *                    | `MYSQLI_OPT_INT_AND_FLOAT_NATIVE` | Convert integer and float columns back to PHP numbers. Only valid for mysqlnd. |
	 *                    | `MYSQLI_OPT_SSL_VERIFY_SERVER_CERT` | Whether to verify server certificate or not. |
	 * @param int|string $value The value for the option.
	 * @return bool Returns `true` on success or `false` on failure.
	 */
	function set_opt($option, $value): bool { /* function body is hidden */ }

	/**
	 * Alias of mysqli_options()
	 * This function is an alias of: mysqli_options().
	 *
	 * @param int $option The option that you want to set. It can be one of the following values:
	 *                    Valid options
	 *                    | `MYSQLI_OPT_CONNECT_TIMEOUT` | Connection timeout in seconds |
	 *                    | `MYSQLI_OPT_READ_TIMEOUT` | Command execution result timeout in seconds. Available as of PHP 7.2.0. |
	 *                    | `MYSQLI_OPT_LOCAL_INFILE` | Enable/disable use of `LOAD LOCAL INFILE` |
	 *                    | `MYSQLI_INIT_COMMAND` | Command to execute after when connecting to MySQL server |
	 *                    | `MYSQLI_SET_CHARSET_NAME` | The charset to be set as default. |
	 *                    | `MYSQLI_READ_DEFAULT_FILE` | Read options from named option file instead of my.cnf Not supported by mysqlnd. |
	 *                    | `MYSQLI_READ_DEFAULT_GROUP` | Read options from the named group from my.cnf or the file specified with `MYSQL_READ_DEFAULT_FILE` . Not supported by mysqlnd. |
	 *                    | `MYSQLI_SERVER_PUBLIC_KEY` | RSA public key file used with the SHA-256 based authentication. |
	 *                    | `MYSQLI_OPT_NET_CMD_BUFFER_SIZE` | The size of the internal command/network buffer. Only valid for mysqlnd. |
	 *                    | `MYSQLI_OPT_NET_READ_BUFFER_SIZE` | Maximum read chunk size in bytes when reading the body of a MySQL command packet. Only valid for mysqlnd. |
	 *                    | `MYSQLI_OPT_INT_AND_FLOAT_NATIVE` | Convert integer and float columns back to PHP numbers. Only valid for mysqlnd. |
	 *                    | `MYSQLI_OPT_SSL_VERIFY_SERVER_CERT` | Whether to verify server certificate or not. |
	 * @param int|string $value The value for the option.
	 * @return bool Returns `true` on success or `false` on failure.
	 */
	function set_opt($option, $value): bool { /* function body is hidden */ }

	/**
	 * Used for establishing secure connections using SSL. It must be called before mysqli_real_connect(). This function does nothing unless OpenSSL support is enabled.
	 *
	 * @param string|null $key The path name to the key file.
	 * @param string|null $certificate The path name to the certificate file.
	 * @param string|null $ca_certificate The path name to the certificate authority file.
	 * @param string|null $ca_path The pathname to a directory that contains trusted SSL CA certificates in PEM format.
	 * @param string|null $cipher_algos A list of allowable ciphers to use for SSL encryption.
	 * @return bool This function always returns `true` value. If SSL setup is incorrect mysqli_real_connect() will return an error when you attempt to connect.
	 */
	function ssl_set($key, $certificate, $ca_certificate, $ca_path, $cipher_algos): bool { /* function body is hidden */ }

	/**
	 * Gets the current system status
	 * mysqli_stat() returns a string containing information similar to that provided by the 'mysqladmin status' command. This includes uptime in seconds and the number of running threads, questions, reloads, and open tables.
	 * @return bool|string A string describing the server status. `false` if an error occurred.
	 */
	function stat(): bool|string { /* function body is hidden */ }

	/**
	 * Initializes a statement and returns an object for use with mysqli_stmt_prepare
	 * Allocates and initializes a statement object suitable for mysqli_stmt_prepare().
	 * @return bool|mysqli_stmt Returns an object.
	 */
	function stmt_init(): bool|mysqli_stmt { /* function body is hidden */ }

	/**
	 * Transfers the result set from the last query on the database connection represented by the `mysql` parameter to be used with the mysqli_data_seek() function.
	 *
	 * @param int|null $mode The option that you want to set. As of PHP 8.1, this parameter has no effect. It can be one of the following values:
	 *                       Valid options
	 *                       | `MYSQLI_STORE_RESULT_COPY_DATA` | Copy results from the internal mysqlnd buffer into the PHP variables fetched. By default, mysqlnd will use a reference logic to avoid copying and duplicating results held in memory. For certain result sets, for example, result sets with many small rows, the copy approach can reduce the overall memory usage because PHP variables holding results may be released earlier (available with mysqlnd only) |
	 * @return bool|mysqli_result Returns a buffered result object or `false` if an error occurred.
	 */
	function store_result($mode = 0): bool|mysqli_result { /* function body is hidden */ }

	/**
	 * Returns whether thread safety is given or not
	 * Tells whether the client library is compiled as thread-safe.
	 * @return bool `true` if the client library is thread-safe, otherwise `false` .
	 */
	function thread_safe(): bool { /* function body is hidden */ }

	/**
	 * Initiate a result set retrieval
	 * Used to initiate the retrieval of a result set from the last query executed using the mysqli_real_query() function on the database connection.
	 * @return bool|mysqli_result Returns an unbuffered result object or `false` if an error occurred.
	 */
	function use_result(): bool|mysqli_result { /* function body is hidden */ }

	/**
	 * Open a new connection to the MySQL server
	 * Opens a connection to the MySQL Server.
	 *
	 * @param string|null $hostname Can be either a host name or an IP address. The local host is assumed when passing the `null` value or the string "localhost" to this parameter. When possible, pipes will be used instead of the TCP/IP protocol. The TCP/IP protocol is used if a host name and port number are provided together e.g. `localhost:3308`. Prepending host by `p:` opens a persistent connection. mysqli_change_user() is automatically called on connections opened from the connection pool.
	 * @param string|null $username The MySQL user name.
	 * @param string|null $password If not provided or `null` , the MySQL server will attempt to authenticate the user against those user records which have no password only. This allows one username to be used with different permissions (depending on if a password is provided or not).
	 * @param string|null $database If provided will specify the default database to be used when performing queries.
	 * @param int|null $port Specifies the port number to attempt to connect to the MySQL server.
	 * @param string|null $socket Specifies the socket or named pipe that should be used. Note : Specifying the `socket` parameter will not explicitly determine the type of connection to be used when connecting to the MySQL server. How the connection is made to the MySQL database is determined by the `hostname` parameter.
	 * @return mixed mysqli::__construct() always returns an object which represents the connection to a MySQL Server, regardless of it being successful or not. mysqli_connect() returns an object which represents the connection to a MySQL Server, or `false` on failure. mysqli::connect() returns `null` on success or `false` on failure.
	 */
	function __construct(
    $hostname = ini_get("mysqli.default_host"),
    $username = ini_get("mysqli.default_user"),
    $password = ini_get("mysqli.default_pw"),
    $database = "",
    $port = ini_get("mysqli.default_port"),
    $socket = ini_get("mysqli.default_socket")
) { /* function body is hidden */ }

	#endregion
}