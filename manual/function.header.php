<?php // generated by https://www.devsense.com/

/**
 * Send a raw HTTP header
 * header() is used to send a raw HTTP header. See the » HTTP/1.1 specification for more information on HTTP headers.
 *
 * @param string $header The header string. There are two special-case header calls. The first is a header that starts with the string " `HTTP/`" (case is not significant), which will be used to figure out the HTTP status code to send. For example, if you have configured Apache to use a PHP script to handle requests for missing files (using the `ErrorDocument` directive), you may want to make sure that your script generates the proper status code.
 *                       ```
 *                       <?php
 *                       // This example illustrates the "HTTP/" special case
 *                       // Better alternatives in typical use cases include:
 *                       // 1. header($_SERVER["SERVER_PROTOCOL"] . " 404 Not Found");
 *                       //  (to override http status messages for clients that are still using HTTP/1.0)
 *                       // 2. http_response_code(404); (to use the default message)
 *                       header("HTTP/1.1 404 Not Found");
 *                       ?>
 *                       ``` The second special case is the "Location:" header. Not only does it send this header back to the browser, but it also returns a `REDIRECT` (302) status code to the browser unless the `201` or a `3xx` status code has already been set.
 *                       ```
 *                       <?php
 *                       header("Location: http://www.example.com/"); /* Redirect browser *\
 *                      
 *                       /* Make sure that code below does not get executed when we redirect. *\
 *                       exit;
 *                       ?>
 *                       ```
 * @param bool|null $replace The optional `replace` parameter indicates whether the header should replace a previous similar header, or add a second header of the same type. By default it will replace, but if you pass in `false` as the second argument you can force multiple headers of the same type. For example:
 *                           ```
 *                           <?php
 *                           header('WWW-Authenticate: Negotiate');
 *                           header('WWW-Authenticate: NTLM', false);
 *                           ?>
 *                           ```
 * @param int|null $response_code Forces the HTTP response code to the specified value. Note that this parameter only has an effect if the `header` is not empty.
 * @return void
 */
 function header($header, $replace = true, $response_code = 0): void { /* function body is hidden */ }